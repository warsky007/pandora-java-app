import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

configure(javaprojects) {
  test {
    ignoreFailures = false
    maxParallelForks = Math.min(Runtime.runtime.availableProcessors(), 8)

    systemProperty 'tests.locale', 'zh-CN'
    systemProperty 'tests.timezone', 'GMT+8'
    systemProperty 'user.timezone', 'GMT+8'

    // custom db connection from gradle vm options
    systemProperty 'db.url', System.properties.getOrDefault('db.url', '127.0.0.1')
    systemProperty 'db.database', System.properties.getOrDefault('db.database', 'h2database')
    systemProperty 'db.user', System.properties.getOrDefault('db.user', 'root')
    systemProperty 'db.password', System.properties.getOrDefault('db.password', '123456')

    useJUnit()

    filter {
    }

    // print test case summary info
    testLogging {
      // set options for log level LIFECYCLE
      events TestLogEvent.FAILED,
          TestLogEvent.PASSED,
          TestLogEvent.SKIPPED,
          TestLogEvent.STANDARD_OUT
      exceptionFormat TestExceptionFormat.FULL
      showExceptions true
      showCauses true
      showStackTraces true

      // set options for log level DEBUG and INFO
      debug {
        events TestLogEvent.STARTED,
            TestLogEvent.FAILED,
            TestLogEvent.PASSED,
            TestLogEvent.SKIPPED,
            TestLogEvent.STANDARD_ERROR,
            TestLogEvent.STANDARD_OUT
        exceptionFormat TestExceptionFormat.FULL
      }
      info.events = debug.events
      info.exceptionFormat = debug.exceptionFormat


      List<Object> failedCases = new ArrayList<>()
      Map<Object, Integer> testTaskDurations = new LinkedHashMap()

      afterTest { desc, result ->
        printf "\n%s > %s \033[33m%dms\033[0m\n", desc.className, desc.name, result.getEndTime() - result.getStartTime()
        testTaskDurations.put(desc.className + "." + desc.name, result.getEndTime() - result.getStartTime())

        if (result.resultType == TestResult.ResultType.FAILURE) {
          failedCases.add(desc.className + "." + desc.name + " ~ \033[31m" + result.getException().getMessage() + "\033[0m")
        }
      }

      afterSuite { desc, result ->
        if (!desc.parent) { // will match the outermost suite
          List<Map.Entry<Object, Integer>> tooLongTests = new ArrayList<>()
          for (Map.Entry<Object, Integer> entry : testTaskDurations.entrySet()) {
            if (entry.getValue() >= 1000) {
              tooLongTests.add(entry)
            }
          }
          Collections.sort(tooLongTests, { o1, o2 -> (int)o1.getValue() - (int)o2.getValue() })

          if (!tooLongTests.isEmpty()) {
            println "\n========== Test Durations (1s+) Summary Begin ==============="
            for (Map.Entry<Object, Integer> entry : tooLongTests) {
              printf("Test %-75s durations: %.2fs\n", entry.getKey(), entry.getValue() / 1000)
            }
            println "========== Test Durations (1s+) Summary End ================="
          }

          if (!failedCases.isEmpty()) {
            println "\n=========== Test Execute Failed Summary Begin ==============="
            for (Object failedCase : failedCases) {
              println failedCase
            }
            println "=========== Test Execute Failed Summary End ================="
          }

          def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
          def startItem = '|  ', endItem = '  |'
          def repeatLength = startItem.length() + output.length() + endItem.length()
          println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
        }
      }
    }
  }
}